<?xml version="1.0"?>
<project name="NUnit" default="build" basedir=".">

<description>
**************************************************************************
* This script is used to build, deploy, test and package the NUnit       *
* framework, test engine and console runner. The framework and console   *
* projects are separate, so this script calls each of those scripts in   *
* order to build the software and then copies it to a common deployment  *
* directory to combine the components. The engine is built as a part of  *
* the console project.                                                   *
*                                                                        *
*   To build the windows installer, you must be running on Windows.      *
*   WiX 3.0 and the WiX tasks for NAnt are required. For a standard WiX  *
*   install, the script should be able to find WiX automatically. If     *
*   this doesn't work, you should set the environment variable WIX       *
*   or the property 'wix.dir' to the path where WiX is installed.        *
*                                                                        *
*   PartCover is required to run the 'test-coverage' target.             *
*                                                                        *
* NOTE: Packaging targets are still under development.                   *
*                                                                        *
**************************************************************************
</description>

<!-- ***************************************************************** -->
<!-- ********* Common properties that control the build ************** -->
<!-- ***************************************************************** -->
 
  <!-- Project name - used as a prefix for packages -->
  <property name="project.name" value="NUnit"/>

  <!-- NUnit Package Version - Three digits -->
  <property name="package.version" value="2.9.6"/>

  <!-- Nominal version used for install directory and program
       files menu. Normally the same as the package version, 
       but may differ when we are in alpha or beta. -->
  <property name="nominal.version" value="2.9.6" />

  <!-- Package Configuration (Release, Alpha, Beta, etc.) -->
  <property name="package.configuration" value=""/>
  
  <!-- Base name for packages - add suffix for Alpha, Beta, RC -->
  <property name="package.name" 
      value="${project.name}-${package.version}"/>

  <!-- Frameworks supported by this build script. The first
         installed framework found is the default for builds. 
         The first .NET and Mono frameworks found are the
         respective net and mono defaults. -->
  <property name="supported.frameworks" 
    value="net-4.5,net-4.0,net-3.5,net-2.0,mono-4.0,mono-3.5,mono-2.0,silverlight-5.0,netcf-3.5,netcf-2.0"/>

	<property name="standard.packages" value="std,with-tests,mono"/>
  
<!-- ***************************************************************** -->
<!-- *********          Define Project Directories           ********* -->
<!-- ***************************************************************** -->

  <property name="project.base.dir"
    value="${project::get-base-directory()}"/>
  <property name="project.package.dir" 
    value="${path::combine(project.base.dir,'package')}"/>
  <property name="project.tools.dir"
    value="${path::combine(project.base.dir,'tools')}"/>
  <property name="project.install.dir"
    value="${path::combine(project.base.dir, 'install')}"/>
  <property name="common.deploy.dir"
    value="${path::combine(project.base.dir, 'deploy')}"/>


	<!-- ***************************************************************** -->
	<!-- *********         Define Packaging Directories          ********* -->
	<!-- ***************************************************************** -->

	<property name="package.working.dir" 
    value="${path::combine(project.package.dir,package.name)}"/>
  <property name="package.bin.dir" 
    value="${path::combine(package.working.dir,'bin')}"/>
  <property name="package.doc.dir" 
    value="${path::combine(package.working.dir,'doc')}"/>
  <property name="package.samples.dir" 
    value="${path::combine(package.working.dir,'samples')}"/>
  <!--<property name="package.src.dir" 
    value="${path::combine(package.working.dir,'src')}"/>
  <property name="package.lib.dir"
    value="${path::combine(package.working.dir,'lib')}"/>-->
  <property name="package.tools.dir"
    value="${path::combine(package.working.dir,'tools')}"/>
  <property name="package.install.dir"
    value="${path::combine(package.working.dir,'install')}"/>

	<!-- ***************************************************************** -->
	<!-- *********         Define Component Directories          ********* -->
	<!-- ***************************************************************** -->

	<property name="framework.project.dir"
			  value="${path::combine(project.base.dir, 'NUnitFramework')}"/>
	<property name="console.project.dir"
			  value="${path::combine(project.base.dir, 'NUnitConsole')}"/>
	<property name="framework.build.dir"
			  value="${path::combine(framework.project.dir, 'build')}"/>
	<property name="console.build.dir"
			  value="${path::combine(console.project.dir, 'build')}"/>

<!-- ***************************************************************** -->
<!-- *********        Set Default Build Configuration        ********* -->
<!-- ***************************************************************** -->

  <call target="set-debug-build-config"/>

	<!-- ***************************************************************** -->
	<!-- *********       Set List of Available Frameworks        ********* -->
	<!-- ***************************************************************** -->

	<foreach item="String" delim=","
		property="framework" in="${supported.frameworks}">

		<!-- NOTE: sdk-exists causes an error if the framework is not installed! -->
		<if test="${framework::exists( framework )}">
			<if test="${framework::sdk-exists( framework )}">
				<property name="installed.frameworks" value="${installed.frameworks},${framework}"
				  if="${property::exists('installed.frameworks')}"/>
				<property name="installed.frameworks" value="${framework}"
				  unless="${property::exists('installed.frameworks')}"/>
			</if>
		</if>
	</foreach>
		
<!-- ***************************************************************** -->
<!-- In the optional local.settings.include file, installations may    -->
<!-- set properties to override the location of external tools.        -->
<!-- ***************************************************************** -->

  <include buildfile="local.settings.include" failonerror="false"/>

<!-- ***************************************************************** -->
<!-- ***          Targets that set the build configuration         *** -->
<!-- ***     These must come before actions like build or test     *** -->
<!-- ***************************************************************** -->

  <target name="debug" depends="set-debug-build-config"
    description="Set config to debug for commands that follow"/>

  <target name="release" depends="set-release-build-config"
    description="Set config to release for commands that follow"/>

<!-- ***************************************************************** -->
<!-- ***             Targets that clean directories                *** -->
<!-- ***************************************************************** -->

  <target name="clean"
      description="Remove all builds for current config">

    <nant target="clean-all" buildfile="NUnitFramework/NUnitFramework.build" />
    <nant target="clean" buildfile="NUnitConsole/NUnitConsole.build" />

  </target>

  <target name="clean-package-dir">

        <delete dir="${package.working.dir}" 
            if="${directory::exists( package.working.dir )}"/>

  </target>

<!-- ***************************************************************** -->
<!-- ***              Targets that perform builds                  *** -->
<!-- ***************************************************************** -->

  <target name="build"
    description="Build framework, engine and console for current config">

    <nant target="build-all" buildfile="${framework.project.dir}/NUnitFramework.build" />
    <nant target="build" buildfile="${console.project.dir}/NUnitConsole.build" />

  </target>

<!-- ***************************************************************** -->
<!-- ***           Deploy the Build to a common directory          *** -->
<!-- ***************************************************************** -->

	<target name="deploy" depends="build"
	  description="Copy builds for current config to the deploy directory">

		<delete dir="${common.deploy.dir}"
		  if="${directory::exists( common.deploy.dir )}"/>

		<copy todir="${common.deploy.dir}">
			<fileset basedir="${framework.build.dir}/${build.config}">
				<include name="**/*"/>
			</fileset>
		</copy>

		<copy todir="${common.deploy.dir}">
			<fileset basedir="${console.build.dir}/${build.config}">
				<include name="**/*"/>
			</fileset>
		</copy>

	</target>
	  
<!-- ***************************************************************** -->
<!-- ***                 Targets for running tests                 *** -->
<!-- ***************************************************************** -->

	<target name="test" depends="deploy,test-console, test-engine, test-framework"
	  description="Build and run tests for the selected config"/>

	<target name="test-console">
		<echo message="*"/>
		<echo message="* Testing the nunit-console ${build.config} build"/>
		<echo message="*"/>

		<property name="nant.settings.currentframework" value="net-2.0"/>

		<exec basedir="${common.deploy.dir}"
			  workingdir="${common.deploy.dir}"
			  program="nunit-console.exe"
			  managed="Auto"
			  failonerror="false"
			  commandline="nunit-console.tests.dll --work=TestResults --result=nunit-console.tests.xml" />

	</target>

	<target name="test-engine">

		<echo message="*"/>
		<echo message="* Testing the NUnitEngine ${build.config} build"/>
		<echo message="*"/>

		<exec basedir="${common.deploy.dir}"
			  workingdir="${common.deploy.dir}"
			  program="nunit-console.exe"
			  managed="auto"
			  failonerror="false"
			  commandline="nunit.engine.tests.dll --work=TestResults --result=nunit.engine.tests.xml" />

	</target>

	<target name="test-framework">

		<foreach item="String" delim=","
			property="framework" in="${installed.frameworks}">

			<property name="nant.settings.currentframework" value="${framework}"/>
			
			<property name="family" value="${framework::get-family(framework)}"/>

			<if test="${family=='net' or family=='mono'}">
				
				<echo message="*"/>
				<echo message="* Testing the NUnitFramework ${framework} ${build.config} build"/>
				<echo message="*"/>

				<exec basedir="${common.deploy.dir}"
					  workingdir="${common.deploy.dir}/${framework}"
					  program="nunit-console.exe"
					  managed="strict"
					  failonerror="false"
					  commandline="nunit.framework.tests.dll --work=../TestResults --result=nunit.framework.tests-${framework}.xml" />

			</if>

			<echo message="*"/>
			<echo message="* Testing the NUnitLite ${framework} ${build.config} build"/>
			<echo message="*"/>

			<!--Note that we need an absolute path for the xml result when running on netcf-->
			<exec basedir="${common.deploy.dir}/${framework}"
				  workingdir="${common.deploy.dir}/${framework}"
				  program="nunitlite.tests.exe"
				  managed="strict"
				  failonerror="false"
				  commandline="-result=${common.deploy.dir}/TestResults/nunitlite.tests-${framework}.xml" />

		</foreach>
	
	</target>

	<!-- NYI-->
  <!--<target name="test-coverage" depends="build"
    description="Run tests under PartCover to get coverage results">

    <echo message="*"/>
    <echo message="* Starting ${runtime.config} ${build.config} test coverage run"/>
    <echo message="*"/>

    <property name="partcover.commandline"
      value='-target direct-runner.exe -target-args "${nunit.commandline}" -include [nunit.framework]* -output TestCoverage-${nant.settings.currentframework}.xml'/>

    <exec basedir="${partcover.dir}"
          workingdir="${current.build.dir}" 
	  program="PartCover.exe" 
          managed="strict"
	  commandline="${partcover.commandline}" />

  </target>-->

<!-- ***************************************************************** -->
<!-- ***         Targets for packaging the NUnit distribution      *** -->
<!-- ***************************************************************** -->

  <target name="package-all"
      description="Create all the standard packages for distribution">
      
    <call target="package-src"/>

    <foreach item="String" delim="," 
        property="package.config" in="${standard.packages}">

      <call target="set-package-config"/>
      <call target="package"/>

    </foreach>

  </target>

<!-- ***************************************************************** -->
<!-- ***   Package Using the Currently Selected Package Config     *** -->
<!-- ***      or the default package if none is selected           *** -->
<!-- ***************************************************************** -->

  <target name="package" depends="build-install-image"
      description="Create a package using the current or default config">

    <call target="create-zip"/>
    <!--<call target="create-msi" if="${create.msi}"/>-->

  </target>

<!-- ***************************************************************** -->
<!-- ***                    Package as a zip                       *** -->
<!-- ***************************************************************** -->

  <target name="package-zip" depends="build-install-image,create-zip"
    description="Create zip binary distribution package"/>

<!-- ***************************************************************** -->
<!-- ***                   Package as an msi                       *** -->
<!-- ***************************************************************** -->

	<!-- NYI -->
  <!--<target name="package-msi" depends="build-install-image,create-msi" 
    description="Build standard msi file and deploy it to the package dir"/>-->

<!-- ***************************************************************** -->
<!-- ***          Create zip from existing install image           *** -->
<!-- ***************************************************************** -->

  <target name="create-zip">

	  <property name="zip.file.name"
		value="${package.name}${package.suffix}${build.suffix}"/>

    <zip ziplevel="9"
        zipfile="${project.package.dir}/${zip.file.name}.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>

  </target>

<!-- ***************************************************************** -->
<!-- ***          Create msi from existing install image           *** -->
<!-- ***************************************************************** -->

	<!-- NYI -->
  <!--<target name="create-msi">
  
    <fail message="MSI can only be built on the Win32 platform" 
      unless="${platform::is-windows()}"/>

    <fail message="MSI can only be built for a Microsoft runtime" 
      unless="${runtime.platform=='net'}"/>

    <fail unless="${property::exists('wix.dir')}">
Unable to locate your WiX installation. Installing WiX normally sets
the WIX environment variable to the directory where WiX is installed. 
If WiX is present, but the WIX variable is not set, you should set it
to the correct location.
    </fail>

    <property name="work.dir"
      value="${package.working.dir}"/>

    <property name="build.suffix" value=""
      unless="${property::exists('build.suffix')}" />
    <property name="msi.file.name"
      value="${package.name}-${package.config}${build.suffix}.msi"
      unless="${package.config==default.package.config}"/>
    <property name="msi.file.name"
      value="${package.name}${build.suffix}.msi"
      if="${package.config==default.package.config}"/>

    <candle out="${work.dir}/" exedir="${wix.dir}">
      <defines>
        <define name="ProductVersion" value="${package.version}" />
        <define name="NominalVersion" value="${nominal.version}" />
        <define name="InstallImage" value="package\NUnit-${package.version}" />
      </defines>
      <sources basedir="${project.install.dir}">
        <include name="**/*.wxs" />
      </sources>
    </candle>

    <light exedir="${wix.dir}"
      out="${project.package.dir}/${msi.file.name}" 
      extensions="WixUIExtension;WixNetFxExtension">
      <arg line="-b ${project.install.dir}\NUnit.Framework.Installer"/>
      <sources>
        <include name="${work.dir}/*.wixobj" />
        <include name="${wix.dir}/wixui.wixlib" />
      </sources>
    </light>

  </target>-->

<!-- ***************************************************************** -->
<!-- ***                  Package source files                     *** -->
<!-- ***************************************************************** -->

  <target name="package-src" depends="clean-package-dir"
    description="Create full source package for developer use">

    <!--<call target="copy-docs"/>-->

    <call target="copy-src"/>

    <zip  ziplevel="9"
        zipfile="${project.package.dir}/${package.name}-src.zip">
      <fileset basedir="${package.working.dir}" prefix="${package.name}">
        <include name="**"/>
      </fileset>
    </zip>
  </target>

<!-- ***************************************************************** -->
<!-- ***            Helper targets used for packaging              *** -->
<!-- ***************************************************************** -->

<!-- ***************************************************************** -->
<!-- ***            Build install image for a package              *** -->
<!-- ***************************************************************** -->

	<target name="build-install-image" depends="clean-package-dir">

		<copy todir="${package.working.dir}">
			<fileset basedir="${project.base.dir}">
				<include name="LICENSE.txt"/>
				<include name="NOTICES.txt"/>
				<include name="CHANGES.txt"/>
			</fileset>
		</copy>

		<copy todir="${package.bin.dir}">
			<fileset basedir="${common.deploy.dir}">
				<include name="nunit-console.exe"/>
				<include name="nunit-console.pdb"/>
				<include name="nunit-console.config"/>
				<include name="nunit-agent.exe"/>
				<include name="nunit-agent.pdb"/>
				<include name="nunit-agent.config"/>
				<include name="nunit.engine.dll"/>
				<include name="nunit.engine.pdb"/>
				<include name="nunit.engine.api.dll"/>
				<include name="nunit.engine.api.pdb"/>
				<include name="nunit.engine.api.xml"/>
				<include name="nunit-console.tests.dll" if="${package.with.tests}"/>
				<include name="nunit-console.tests.pdb" if="${package.with.tests}"/>
				<include name="nunit.engine.tests.dll" if="${package.with.tests}"/>
				<include name="nunit.engine.tests.pdb" if="${package.with.tests}"/>
				<include name="nunit.framework.dll" if="${package.with.tests}"/>
				<include name="mock-assembly.dll" if="${package.with.tests}"/>
				<include name="TextSummary.xslt" if="${package.with.tests}"/>
				<include name="NUnit2TestResult.xsd" if="${package.with.tests}"/>
			</fileset>
		</copy>

		<foreach item="String" delim="+"
		  property="runtime" in="${package.runtimes}">

			<copy todir="${package.bin.dir}/${runtime}">
				<fileset basedir="${common.deploy.dir}/${runtime}">
					<include name="nunit.framework.dll"/>
					<include name="nunit.framework.pdb"/>
					<include name="nunit.framework.xml"/>
					<include name="nunit.framework.tests.dll" if="${package.with.tests}"/>
					<include name="nunit.framework.tests.pdb" if="${package.with.tests}"/>
					<include name="nunit.testdata.dll" if="${package.with.tests}"/>
					<include name="nunit.testdata.pdb" if="${package.with.tests}"/>
					<include name="nunitlite.dll"/>
					<include name="nunitlite.pdb"/>
					<include name="nunitlite.xml"/>
					<include name="nunitlite.tests.exe" if="${package.with.tests}"/>
					<include name="nunitlite.tests.pdb" if="${package.with.tests}"/>
					<include name="nunitlite.testdata.dll" if="${package.with.tests}"/>
					<include name="nunitlite.testdata.pdb" if="${package.with.tests}"/>
					<include name="mock-assembly.dll" if="${package.with.tests}"/>
					<include name="mock-assembly.pdb" if="${package.with.tests}"/>
				</fileset>
			</copy>
			
		</foreach>

	</target>

<!-- ***************************************************************** -->
<!-- ***            Copy the source code for a package             *** -->
<!-- ***************************************************************** -->

  <target name="copy-src">

    <copy todir="${package.working.dir}">
      <fileset basedir="${project.base.dir}">
        <include name="BUILDING.txt"/>
        <include name="LICENSE.txt"/>
		  <include name="CHANGES.txt"/>
        <include name="nant"/>
        <include name="nant.bat"/>
        <include name="NOTICES.txt"/>
        <include name="nunit.build"/>
        <include name="nunit.common.include"/>
        <include name="nunit.snk"/>
        <include name="nunit.sln"/>
        <include name="NUnitTests.nunit"/>
        <include name="src/CommonAssemblyInfo.cs"/>
        <include name="tools/**/*"/>
      </fileset>
    </copy>

    <property name="saved.working.dir" value="${package.working.dir}" />

    <property name="package.working.dir"
      value="${path::combine(saved.working.dir,'NUnitFramework')}" />
    <nant target="copy-src" inheritrefs="true"
      buildfile="NUnitFramework/NUnitFramework.build" />

    <property name="package.working.dir"
      value="${path::combine(saved.working.dir,'NUnitConsole')}" />
    <nant target="copy-src" inheritrefs="true"
      buildfile="NUnitConsole/NUnitConsole.build" />

    <property name="package.working.dir" value="${saved.working.dir}" />

  </target>

<!-- ***************************************************************** -->
<!-- ********* Targets for setting the build configuration *********** -->
<!-- ***************************************************************** -->

  <target name="set-build-config" description="Set the build config">
    <call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-debug-build-config">
    <property name="build.config" value="debug"/>
    <property name="build.debug" value="true"/>
    <property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
        dynamic="true"/>
    <property name="build.suffix" value="-dbg"/>
  </target>
	
  <target name="set-release-build-config">
    <property name="build.config" value="release"/>
    <property name="build.debug" value="false"/>
    <property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
    <property name="build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the package configuration          *** -->
<!-- ***************************************************************** -->

	<target name="set-package-config">
		<call target="set-${package.config}-package-config"/>
	</target>

	<target name="set-std-package-config">
		<property name="package.config" value="std"/>
		<property name="package.runtimes" value="net-4.5+net-4.0+net-3.5+net-2.0+netcf-3.5+netcf-2.0+silverlight-5.0"/>
		<property name="package.suffix" value=""/>
		<property name="package.with.tests" value="false"/>
		<property name="create.msi" value="${platform::is-windows()}"/>
	</target>

	<target name="set-with-tests-package-config">
		<property name="package.config" value="std"/>
		<property name="package.runtimes" value="net-4.5+net-4.0+net-3.5+net-2.0+netcf-3.5+netcf-2.0+silverlight-5.0"/>
		<property name="package.suffix" value="-with-tests"/>
		<property name="package.with.tests" value="true"/>
		<property name="create.msi" value="${platform::is-windows()}"/>
	</target>

	<target name="set-mono-package-config">
		<property name="package.config" value="mono"/>
		<property name="package.runtimes" value="mono-4.0+mono-3.5+mono-2.0"/>
		<property name="package.suffix" value="-mono"/>
		<property name="package.with.tests" value="false"/>
		<property name="create.msi" value="false"/>
	</target>

<!-- ***************************************************************** -->
<!-- ****** Patternsets and Filesets Used by Various Targets  ******** -->
<!-- ***************************************************************** -->

  <!-- Files to be copied to source directories -->
  <fileset id="source-files" >
        <include name="**/*.sln" />
        <include name="**/*.csproj" />
        <include name="**/*.config" />
        <include name="**/*.build" />
        <include name="**/*.cs" />
        <include name="**/*.xsd" />
        <include name="**/*.xslt" />
        <include name="**/*.resx" />
        <include name="**/*.jpg" />
        <include name="**/*.gif" />
        <include name="**/*.ico" />
        <include name="**/*.txt" />
        <include name="**/resources/*" />

        <exclude name="**/CVS/**" />
        <exclude name="**/bin/**" />
        <exclude name="**/obj/**" />
        <exclude name="**/Debug/**" />
        <exclude name="**/Release/**" />
  </fileset>

</project>
